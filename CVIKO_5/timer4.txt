// REV INTERRUPT
#pragma config FOSC = HSMP      // Oscillator Selection bits (HS oscillator (medium power 4-16 MHz))
#pragma config PLLCFG = ON      // 4X PLL Enable (Oscillator multiplied by 4)
#pragma config WDTEN = OFF      // Watchdog Timer Enable bits (Watch dog timer is always disabled. SWDTEN has no effect.)

#include <xc.h>

#define _XTAL_FREQ 32E6             // definice fosc pro knihovnu
#define LED1 LATDbits.LATD2
#define LED2 LATDbits.LATD3
#define DELAY1 (0xFFFF - 29999)      // hodnota timeru pro 0.05 s
#define DELAY5 (0xFFFF - 59999) 

#define BTTN1 PORTCbits.RC0
#define BTTN2 PORTAbits.RA4
//pou?ijte druhé tla?ítko pro zastavení a znovuspu?t?ni blikání. 
//Pou?ijte bity TMRxON pro zastavení a znovuspu?t?ni ?íta?e (T1CONbits.TMR1ON pro TMR1 a T5CONbits.TMR5ON pro TMR5).

volatile int tempd1 = DELAY1;
volatile int tempd5 = DELAY5;
volatile int temp = 0;
volatile int last_BTTN1_state = 1; 
volatile int last_BTTN2_state = 1;

void __interrupt() T1_ISR_HANDLER(void){
     
    if (TMR1IF && TMR1IE ){         // kontrola priznaku IF (interrupt flag) a IE (interrupt enabled)             
        LED1 ^= 1;
        TMR1 = tempd1;               // nastaveni registru timeru (preruseni vyvolava preteceni registru)
      
          TMR1IF = 0;
    }
  
    if (TMR5IF && TMR5IE ){         // kontrola priznaku IF (interrupt flag) a IE (interrupt enabled)             
        LED2 ^= 1;
        TMR5 = tempd5;               // nastaveni registru timeru (preruseni vyvolava preteceni registru)
      
        TMR5IF = 0;
    }
    
}

void init(void){
    
    TRISCbits.RC0 = 1;
    TRISDbits.TRISD2 = 0;          
    TRISDbits.TRISD3 = 0; 
    T1CONbits.TMR1CS = 0b00;        // zdroj casovace 1
    T1CONbits.T1CKPS = 0b11;        // nastaveni delicky  
    
    TRISAbits.RA4 = 1;
    T5CONbits.TMR5CS = 0b00;        // zdroj casovace 5
    T5CONbits.T5CKPS = 0b11;        // nastaveni delicky  
    
    TMR1IE = 1;                     // povoleni preruseni pro TMR1
    TMR1IF = 0;                     // smazani priznaku (pro jistotu)
    TMR5IE = 1;                     // povoleni preruseni pro TMR5
    TMR5IF = 0;                     // smazani priznaku (pro jistotu)
    
    PEIE = 1;                       // povoleni preruseni od periferii
    TMR1ON = 1;                     
    TMR5ON = 1; 
    GIE = 1;                        // globalni povoleni preruseni
    
    
}

void main(void) {
    init();                       
    
    while(1){
             
        if(BTTN1 == 0 && last_BTTN1_state == 1){
            __delay_ms(50);
            
            temp = tempd1;
            tempd1 = tempd5;
            tempd5 = temp;
        }
        last_BTTN1_state = BTTN1;
        
        if(BTTN2 == 0 && last_BTTN2_state == 1){
            __delay_ms(50);
            
                    TMR1ON ^= 1;                     
                    TMR5ON ^= 1; 
                  
        }
        last_BTTN2_state = BTTN2;
        
        
    }
}